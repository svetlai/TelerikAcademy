// <copyright file="StringExtensions.cs" company="Telerik Academy">
// Generated by Telerik Academy
// </copyright>
namespace Telerik.ILS.Common
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using System.Security.Cryptography;
    using System.Text;
    using System.Text.RegularExpressions;

    /// <summary>
    /// Contains extension methods for <seealso cref="System.String"/> class.
    /// </summary>
    public static class StringExtensions
    {
        /// <summary>
        /// Computes the hash value of the given <paramref name="input"/>.
        /// </summary>
        /// <param name="input">A string that should be hashed.</param>
        /// <returns>The computed hash in a hexadecimal <seealso cref="System.String"/>.</returns>
        /// <example>
        /// This example shows how to use the <see cref="ToMD5Hash"/> method.
        /// <code>
        /// class Example
        /// {
        ///     static void Main()
        ///     {
        ///         string academy = "Telerik Academy";
        ///         Console.WriteLine(academy.ToMD5Hash());
        ///     }
        /// }
        /// </code>
        /// </example>
        public static string ToMd5Hash(this string input)
        {
            var md5Hash = MD5.Create();

            // Convert the input string to a byte array and compute the hash.
            var data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

            // Create a new StringBuilder to collect the bytes
            var builder = new StringBuilder();

            // Format each byte as a hexadecimal string.
            for (int i = 0; i < data.Length; i++)
            {
                builder.Append(data[i].ToString("x2"));
            }

            return builder.ToString();
        }

        /// <summary>
        /// Checks if the <paramref name="input"/> can be interpreted as a true <seealso cref="System.Boolean"/>.
        /// </summary>
        /// <param name="input">A <seealso cref="System.String"/> to be checked.</param>
        /// <returns>True if contains a true boolean value, false if otherwise.</returns>
        /// <example>
        /// This example shows how to use the <see cref="ToBoolean"/> method.
        /// <code>
        /// class Example
        /// {
        ///     static void Main()
        ///     {
        ///         Console.WriteLine("ok".ToBoolean());    //ouput : True
        ///     }
        /// }         
        /// </code>
        /// </example>
        public static bool ToBoolean(this string input)
        {
            var stringTrueValues = new[] { "true", "ok", "yes", "1", "да" };
            return stringTrueValues.Contains(input.ToLower());
        }

        /// <summary>
        /// Parses a given <seealso cref="System.String"/> value to <seealso cref="System.Int16"/> format.
        /// </summary>
        /// <param name="input">A <seealso cref="System.String"/> to be parsed to <seealso cref="System.Int16"/> format.</param>
        /// <returns>The parsed <seealso cref="System.String"/> in <seealso cref="System.Int16"/> format if successful, or 0 if not.</returns>
        /// <example>
        /// This example shows how to use the <see cref="ToShort"/> method.
        /// <code>
        /// class Example
        /// {
        ///     static void Main()
        ///     {
        ///         Console.WriteLine("1".ToShort());    //ouput : 1
        ///     }
        /// }         
        /// </code>
        /// </example>
        public static short ToShort(this string input)
        {
            short shortValue;
            short.TryParse(input, out shortValue);
            return shortValue;
        }

        /// <summary>
        /// Parses a given <seealso cref="System.String"/> value to <seealso cref="System.Int32"/> format.
        /// </summary>
        /// <param name="input">A <seealso cref="System.String"/> to be parsed to <seealso cref="System.Int32"/> format.</param>
        /// <returns>The parsed <seealso cref="System.String"/> in <seealso cref="System.Int32"/> format if successful, or 0 if not.</returns>
        /// <example>
        /// This example shows how to use the <see cref="ToInteger"/> method.
        /// <code>
        /// class Example
        /// {
        ///     static void Main()
        ///     {
        ///         Console.WriteLine("1".ToInteger());    //ouput : 1
        ///     }
        /// }         
        /// </code>
        /// </example>
        public static int ToInteger(this string input)
        {
            int integerValue;
            int.TryParse(input, out integerValue);
            return integerValue;
        }

        /// <summary>
        /// Parses a given <seealso cref="System.String"/> value to <seealso cref="System.Int64"/> format.
        /// </summary>
        /// <param name="input">A <seealso cref="System.String"/> to be parsed to <seealso cref="System.Int64"/> format.</param>
        /// <returns>The parsed <seealso cref="System.String"/> in <seealso cref="System.Int64"/> format if successful, or 0 if not.</returns>
        /// <example>
        /// This example shows how to use the <see cref="ToLong"/> method.
        /// <code>
        /// class Example
        /// {
        ///     static void Main()
        ///     {
        ///         Console.WriteLine("1".ToLong());    //ouput : 1L
        ///     }
        /// }         
        /// </code>
        /// </example>
        public static long ToLong(this string input)
        {
            long longValue;
            long.TryParse(input, out longValue);
            return longValue;
        }

        /// <summary>
        /// Parses a given <seealso cref="System.String"/> value to <seealso cref="System.DateTime"/> format.
        /// </summary>
        /// <param name="input">A <seealso cref="System.String"/> to be parsed to <seealso cref="System.DateTime"/> format.</param>
        /// <returns>The parsed <seealso cref="System.String"/> in <seealso cref="System.DateTime"/> format if successful, or the default <seealso cref="System.DateTime"/> if not.</returns>
        /// <example>
        /// This example shows how to use the <see cref="ToDateTime"/> method.
        /// <code>
        /// class Example
        /// {
        ///     static void Main()
        ///     {
        ///         Console.WriteLine("someString".ToDateTime());   //output : 1/1/0001 12:00:00 AM
        ///     }
        /// }         
        /// </code>
        /// </example>
        public static DateTime ToDateTime(this string input)
        {
            DateTime dateTimeValue;
            DateTime.TryParse(input, out dateTimeValue);
            return dateTimeValue;
        }

        /// <summary>
        /// Capitalizes the first letter of a given <seealso cref="System.String"/> value.
        /// </summary>
        /// <param name="input">A <seealso cref="System.String"/> value.</param>
        /// <returns>The <seealso cref="System.String"/> with capitalized first letter if successful, or null if the string is empty or null.</returns>
        /// <example>
        /// This example shows how to use the <see cref="ToDateTime"/> method.
        /// <code>
        /// class Example
        /// {
        ///     static void Main()
        ///     {
        ///         Console.WriteLine("hello".CapitalizeFirstLetter());   //output : Hello
        ///     }
        /// }         
        /// </code>
        /// </example>
        public static string CapitalizeFirstLetter(this string input)
        {
            if (string.IsNullOrEmpty(input))
            {
                return input;
            }

            return input.Substring(0, 1).ToUpper(CultureInfo.CurrentCulture) + input.Substring(1, input.Length - 1);
        }

        /// <summary>
        /// Extracts a substring between two other <seealso cref="System.String"/> values.
        /// </summary>
        /// <param name="input">A <seealso cref="System.String"/> to search in.</param>
        /// <param name="startString">The <seealso cref="System.String"/> from which the extraction should start.</param>
        /// <param name="endString">The <seealso cref="System.String"/> to which the extraction should end.</param>
        /// <param name="startFrom">Position from which to start the search for the <paramref name="startString"/>.</param>
        /// <returns>Return the extracted string or String.Empty if the given string is empty or it doesn't exist in the given input.</returns>
        /// <example>
        /// This example shows how to use the <see cref="GetStringBetween"/> method.
        /// <code>
        /// class Example
        /// {
        ///     static void Main()
        ///     {
        ///         Console.WriteLine("good morning world.".GetStringBetween("good","world", 0));
        ///         //output : morning
        ///     }
        /// }  
        /// </code>
        /// </example>
        public static string GetStringBetween(this string input, string startString, string endString, int startFrom = 0)
        {
            input = input.Substring(startFrom);
            startFrom = 0;
            if (!input.Contains(startString) || !input.Contains(endString))
            {
                return string.Empty;
            }

            var startPosition = input.IndexOf(startString, startFrom, StringComparison.Ordinal) + startString.Length;
            if (startPosition == -1)
            {
                return string.Empty;
            }

            var endPosition = input.IndexOf(endString, startPosition, StringComparison.Ordinal);
            if (endPosition == -1)
            {
                return string.Empty;
            }

            return input.Substring(startPosition, endPosition - startPosition);
        }

        /// <summary>
        /// Replaces cyrillic letters in a given string <paramref name="input"/> with their latin representation.
        /// </summary>
        /// <param name="input">A cyrillic <seealso cref="System.String"/> to be converted to latin.</param>
        /// <returns>Latin representation of the initially given cyrillic <seealso cref="System.String"/>.</returns>
        /// <example>
        /// This example shows how to use the <see cref="ConvertCyrillicToLatinLetters"/> method.
        /// <code>
        /// class Example
        /// {
        ///     static void Main()
        ///     {
        ///         Console.WriteLine("здрасти".ConvertCyrillicToLatinLetters());
        ///         //output : zdrasti
        ///     }
        /// }  
        /// </code>
        /// </example>
        public static string ConvertCyrillicToLatinLetters(this string input)
        {
            var bulgarianLetters = new[]
                                       {
                                           "а", "б", "в", "г", "д", "е", "ж", "з", "и", "й", "к", "л", "м", "н", "о", "п",
                                           "р", "с", "т", "у", "ф", "х", "ц", "ч", "ш", "щ", "ъ", "ь", "ю", "я"
                                       };
            var latinRepresentationsOfBulgarianLetters = new[]
                                                             {
                                                                 "a", "b", "v", "g", "d", "e", "j", "z", "i", "y", "k",
                                                                 "l", "m", "n", "o", "p", "r", "s", "t", "u", "f", "h",
                                                                 "c", "ch", "sh", "sht", "u", "i", "yu", "ya"
                                                             };
            for (var i = 0; i < bulgarianLetters.Length; i++)
            {
                input = input.Replace(bulgarianLetters[i], latinRepresentationsOfBulgarianLetters[i]);
                input = input.Replace(bulgarianLetters[i].ToUpper(), latinRepresentationsOfBulgarianLetters[i].CapitalizeFirstLetter());
            }

            return input;
        }

        /// <summary>
        /// Replaces latin letters in a given string <paramref name="input"/> with their cyrillic representation.
        /// </summary>
        /// <param name="input">A latin <seealso cref="System.String"/> to be converted to cyrillic.</param>
        /// <returns>Cyrillic representation of the initially given latin <seealso cref="System.String"/>.</returns>
        /// <example>
        /// This example shows how to use the <see cref="ConvertLatinToCyrillicKeyboard"/> method.
        /// <code>
        /// class Example
        /// {
        ///     static void Main()
        ///     {
        ///         Console.WriteLine("zdrasti".ConvertLatinToCyrillicKeyboard());  //output : здрасти
        ///     }
        /// }  
        /// </code>
        /// </example>
        public static string ConvertLatinToCyrillicKeyboard(this string input)
        {
            var latinLetters = new[]
                                   {
                                       "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p",
                                       "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"
                                   };

            var bulgarianRepresentationOfLatinKeyboard = new[]
                                                             {
                                                                 "а", "б", "ц", "д", "е", "ф", "г", "х", "и", "й", "к",
                                                                 "л", "м", "н", "о", "п", "я", "р", "с", "т", "у", "ж",
                                                                 "в", "ь", "ъ", "з"
                                                             };

            for (int i = 0; i < latinLetters.Length; i++)
            {
                input = input.Replace(latinLetters[i], bulgarianRepresentationOfLatinKeyboard[i]);
                input = input.Replace(latinLetters[i].ToUpper(), bulgarianRepresentationOfLatinKeyboard[i].ToUpper());
            }

            return input;
        }

        /// <summary>
        /// Escapes invalid symbols in a username <seealso cref="System.String"/> value.
        /// </summary>
        /// <param name="input">Username <seealso cref="System.String"/> value to be validated.</param>
        /// <returns>Returns the given <paramref name="input"/>, excluding the invalid symbols.</returns>
        /// <example>
        /// This example shows how to use the <see cref="ToValidUsername"/> method.
        /// <code>
        /// class Example
        /// {
        ///     static void Main()
        ///     {
        ///         Console.WriteLine("pesho&$%123".ToValidUsername()); //output : pesho123
        ///     }
        /// }  
        /// </code>
        /// </example>
        public static string ToValidUsername(this string input)
        {
            input = input.ConvertCyrillicToLatinLetters();

            // replace all non-alphabet (aside from number, underscore, hyphen and dot) symbols with an empty string
            return Regex.Replace(input, @"[^a-zA-z0-9_\.]+", string.Empty);
        }

        /// <summary>
        /// Escapes invalid symbols in file name.
        /// </summary>
        /// <param name="input">A file name <seealso cref="System.String"/> to be validated.</param>
        /// <returns>Returns the given <paramref name="input"/> in latin, excluding the invalid symbols.</returns>
        /// <example>
        /// This example shows how to use the <see cref="ToValidLatinFileName"/> method.
        /// <code>
        /// class Example
        /// {
        ///     static void Main()
        ///     {
        ///         Console.WriteLine("Some invaliд **£$ file name.cs".ToValidLatinFileName()); 
        ///         //output : some-invalid-file-name.cs
        ///     }
        /// }  
        /// </code>
        /// </example>
        public static string ToValidLatinFileName(this string input)
        {
            input = input.Replace(" ", "-").ConvertCyrillicToLatinLetters();

            // replace all non-alphabet (aside from number, underscore, hyphen and dot) symbols with an empty string
            return Regex.Replace(input, @"[^a-zA-z0-9_\.\-]+", string.Empty);
        }

        /// <summary>
        /// Returns the first n characters from a <seealso cref="System.String"/> value.
        /// </summary>
        /// <param name="input">The input <seealso cref="System.String"/> value.</param>
        /// <param name="charsCount">The number of characters to be returned.</param>
        /// <returns>Returns the first <paramref name="charsCount"/> characters from the <paramref name="input"/> <seealso cref="System.String"/> value.</returns>
        /// <exception cref="System.ArgumentOutOfRangeException">
        /// If <paramref name="charsCount"/> contains a negative value.
        /// </exception>
        /// <example>
        /// This example shows how to use the <see cref="GetFirstCharacters"/> method.
        /// <code>
        /// class Example
        /// {
        ///     static void Main()
        ///     {
        ///         Console.WriteLine("someString".GetFirstCharacters(4)); 
        ///         //output : some
        ///     }
        /// }  
        /// </code>
        /// </example>
        public static string GetFirstCharacters(this string input, int charsCount)
        {
            return input.Substring(0, Math.Min(input.Length, charsCount));
        }

        /// <summary>
        /// Returns the file extension part from a given file name.
        /// </summary>
        /// <param name="fileName">A <seealso cref="System.String"/> value containing the file name with its extension.</param>
        /// <returns>A <seealso cref="System.String"/> value containing the file name extension or string.Empty if none.</returns>
        /// <example>
        /// This example shows how to use the <see cref="GetFileExtension"/> method.
        /// <code>
        /// class Example
        /// {
        ///     static void Main()
        ///     {
        ///         Console.WriteLine("file-name.js".GetFileExtension()); 
        ///         //output : js
        ///     }
        /// }  
        /// </code>
        /// </example>
        public static string GetFileExtension(this string fileName)
        {
            if (string.IsNullOrWhiteSpace(fileName))
            {
                return string.Empty;
            }

            string[] fileParts = fileName.Split(new[] { "." }, StringSplitOptions.None);
            if (fileParts.Count() == 1 || string.IsNullOrEmpty(fileParts.Last()))
            {
                return string.Empty;
            }

            return fileParts.Last().Trim().ToLower();
        }

        /// <summary>
        /// Returns the corresponding content type for the given file extension.
        /// </summary>
        /// <param name="fileExtension">The file extension as <seealso cref="System.String"/> without the dot(.).</param>
        /// <returns>The content type as a <seealso cref="System.String"/> value.</returns>
        /// <example>
        /// This example shows how to use the <see cref="ToContentType"/> method.
        /// <code>
        /// class Example
        /// {
        ///     static void Main()
        ///     {
        ///         Console.WriteLine("jpg".ToContentType()); 
        ///         //output : image/jpeg
        ///     }
        /// }  
        /// </code>
        /// </example>
        public static string ToContentType(this string fileExtension)
        {
            var fileExtensionToContentType = new Dictionary<string, string>
                                                 {
                                                     { "jpg", "image/jpeg" },
                                                     { "jpeg", "image/jpeg" },
                                                     { "png", "image/x-png" },
                                                     {
                                                         "docx",
                                                         "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                                     },
                                                     { "doc", "application/msword" },
                                                     { "pdf", "application/pdf" },
                                                     { "txt", "text/plain" },
                                                     { "rtf", "application/rtf" }
                                                 };
            if (fileExtensionToContentType.ContainsKey(fileExtension.Trim()))
            {
                return fileExtensionToContentType[fileExtension.Trim()];
            }

            // default value
            return "application/octet-stream";
        }

        /// <summary>
        /// Converts a given <seealso cref="System.String"/> to byte array.
        /// </summary>
        /// <param name="input">A <seealso cref="System.String"/> value to be converted.</param>
        /// <returns>A byte array, containing each symbol of the given input converted to byte</returns>
        /// <example>
        /// This example shows how to use the <see cref="ToByteArray"/> method.
        /// <code>
        /// class Example
        /// {
        ///     static void Main()
        ///     {
        ///         var arr = "hi".ToByteArray();
        ///         Console.WriteLine(String.Join(" ",arr)); 
        ///         //output : 104 0 105 0
        ///     }
        /// }  
        /// </code>
        /// </example>
        public static byte[] ToByteArray(this string input)
        {
            var bytesArray = new byte[input.Length * sizeof(char)];

            // Copy a number of bytes from a a certain position in a source array to a certain position in a destination array.
            Buffer.BlockCopy(input.ToCharArray(), 0, bytesArray, 0, bytesArray.Length);
            return bytesArray;
        }
    }
}
